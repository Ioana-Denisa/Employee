@implements IDisposable

@if (allState.ShowEmployee)
{
	if (ShowAddOrUpdateEmployee)
	{
		<div class="container">
			<div class="row mt-5">
				<div class="col-lg-1 text-center">
					<i class="bi bi-x-lg fs-2 fw-bold text-danger" style="cursor:pointer" @onclick="CloseForm"></i>
				</div>
				<div class="col-lg-6 text-center"><h2>@Title Employee</h2></div>
			</div>

			<div class="row">
				<div class="col-lg-12 mt-2 mb-5 d-flex justify-content-center">
					<div class="hstack">
						@if (FirstLayer)
						{
							<div class="@FloatingNumber1 text-center">1</div>
							<div class="@Floatingdiv1 format-border"></div>
							<div class="@FloatingNumber2 text-center">2</div>
							<div class="@Floatingdiv2 format-border"></div>
						}
						@if (SecondLayer)
						{
							<div class="@FloatingNumber1 text-center">1</div>
							<div class="@Floatingdiv1 format-border"></div>
							<div class="@FloatingNumber2 text-center">2</div>
							<div class="@Floatingdiv2 format-border"></div>
						}
					</div>
				</div>

				<div class="col-lg-12">
					<div class="container-fluid">
						@if (FirstLayer)
						{
							<EditForm Enhance Model="EmployeeGroup1" OnValidSubmit="Form1">
								<DataAnnotationsValidator />
								<div class="row">
									<div class="col-lg-2"></div>
									<div class="col-lg-4">
										<div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Personal Information</div>
										<div class="card-body">
											<div class="form-group">
												<label class="form-label">Fullname</label>
												<InputText @bind-Value="EmployeeGroup1.Fullname" class="form-control" />
												<ValidationMessage For="()=>EmployeeGroup1.Fullname" class="text-danger" />
											</div>
											<div class="form-group mt-2">
												<label class="form-label">Phone number</label>
												<InputText @bind-Value="EmployeeGroup1.PhoneNumber" class="form-control" />
												<ValidationMessage For="()=>EmployeeGroup1.PhoneNumber" class="text-danger" />
											</div>
											<div class="form-group mt-2">
												<label class="form-label">Address</label>
												<InputText @bind-Value="EmployeeGroup1.Address" class="form-control" />
												<ValidationMessage For="()=>EmployeeGroup1.Address" class="text-danger" />
											</div>
											<div class="form-group mt-2">
												<label class="form-label">Hire Date</label>
												<InputDate @bind-Value="EmployeeGroup1.HireDate" class="form-control" />
												<ValidationMessage For="()=>EmployeeGroup1.HireDate" class="text-danger" />
											</div>
										</div>
									</div>

									<div class="col-lg-4 mt-2">
										<div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Other Information</div>
										<div class="form-group mt-5">
											<button class="btn btn-primary float-end mt-4 mb-5" type="submit">
												<i class="bi bi-arrow-right"></i>
												Next
											</button>
										</div>
									</div>
									<div class="col-lg-2"></div>
								</div>
							</EditForm>
						}
						@if (SecondLayer)
						{
							<EditForm Enhance Model="EmployeeGroup2" OnValidSubmit="Form2">
								<DataAnnotationsValidator />
								<div class="row">
									<div class="col-lg-2"></div>
									<div class="col-lg-4">
										<div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Job Information</div>
										<div class="card-body">
											<div class="form-group mt-3">
												<label class="form-label">Select Division</label>
												@{
													string division = Division.Equals("") ? "Select Division" : Division;
												}
												<SfDropDownList TValue="string" TItem="Division" Placeholder="@division" DataSource="Divisions">
													<DropDownListFieldSettings Value="ID" Text="Name"></DropDownListFieldSettings>
													<DropDownListEvents TValue="string" TItem="Division" ValueChange="OnDivisionValueChange"></DropDownListEvents>
												</SfDropDownList>
											</div>
											<div class="form-group mt-3">
												<label class="form-label">Select Department</label>
												@{
													string department = Department.Equals("") ? "Select Department" : Department;
												}
												<SfDropDownList TValue="string" TItem="Department" Placeholder="department" DataSource="Departments">
													<DropDownListFieldSettings Value="ID" Text="Name"></DropDownListFieldSettings>
													<DropDownListEvents TValue="string" TItem="Department" ValueChange="OnDepartmentValueChange"></DropDownListEvents>
												</SfDropDownList>
											</div>
											<div class="form-group mt-3">
												<label class="form-label">Select Specialization</label>
												@{
													string specialization = Specialization.Equals("") ? "Select Specialization" : Specialization;
												}
												<SfDropDownList TValue="string" TItem="Specialization" Placeholder="specialization" DataSource="Specializations">
													<DropDownListFieldSettings Value="ID" Text="Name"></DropDownListFieldSettings>
													<DropDownListEvents TValue="string" TItem="Specialization" ValueChange="OnSpecializationValueChange"></DropDownListEvents>
												</SfDropDownList>
												<ValidationMessage For="()=>EmployeeGroup2.SpecializationID" class="text-danger" />
											</div>
											<div class="form-group mt-4 mb-5">
												<button class="btn btn-primary float-start " type="button" @onclick="PrevClicked">
													<i class="bi bi-arrow-left"></i>
													Prev
												</button>
											</div>
										</div>
									</div>

									<div class="col-lg-4 ">
										<div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Location Information</div>
										<div class="card-body">
											<div class="form-group ">
												<label class="form-label">Select Country</label>
												@{
													string country = Country.Equals("") ? "Select Country" : Country;
												}
												<SfDropDownList TValue="string" TItem="Country" Placeholder="country" DataSource="Countries">
													<DropDownListFieldSettings Value="ID" Text="Name"></DropDownListFieldSettings>
													<DropDownListEvents TValue="string" TItem="Country" ValueChange="OnCountryValueChange"></DropDownListEvents>
												</SfDropDownList>
											</div>
											<div class="form-group mt-3">
												<label class="form-label">Select County</label>
												@{
													string county = County.Equals("") ? "Select County" : County;
												}
												<SfDropDownList TValue="string" TItem="County" Placeholder="county" DataSource="Counties">
													<DropDownListFieldSettings Value="ID" Text="Name"></DropDownListFieldSettings>
													<DropDownListEvents TValue="string" TItem="County" ValueChange="OnCountyValueChange"></DropDownListEvents>
												</SfDropDownList>
											</div>
											<div class="form-group mt-3">
												<label class="form-label">Select Town</label>
												@{
													string town = Town.Equals("") ? "Select Town" : Town;
												}
												<SfDropDownList TValue="string" TItem="Town" Placeholder="town" DataSource="Towns">
													<DropDownListFieldSettings Value="ID" Text="Name"></DropDownListFieldSettings>
													<DropDownListEvents TValue="string" TItem="Town" ValueChange="OnTownValueChange"></DropDownListEvents>
												</SfDropDownList>
												<ValidationMessage For="()=>EmployeeGroup2.TownID" class="text-danger" />
											</div>
											<div class="form-group mt-3">
												<label class="form-label">Select User</label>
												@{
													string user = User.Equals("") ? "Select User" : User;
												}
												<SfDropDownList TValue="string" TItem="User" Placeholder="user" DataSource="Users">
													<DropDownListFieldSettings Value="ID" Text="Name"></DropDownListFieldSettings>
													<DropDownListEvents TValue="string" TItem="User" ValueChange="OnUserValueChange"></DropDownListEvents>
												</SfDropDownList>
												<ValidationMessage For="()=>EmployeeGroup2.UserID" class="text-danger" />
											</div>
										</div>
										<div class="form-group mt-4 mb-5">
											<button class="btn btn-success float-end" type="submit">
												<i class="bi bi-save"></i>
												Save
											</button>
										</div>
									</div>
									<div class="col-lg-2"></div>
								</div>
							</EditForm>
						}

					</div>
				</div>
			</div>
		</div>
	}
}


<style>
	.floatingDiv {
	width: 500px;
	background: #228ada;
	height: 10px;
	}

	.floatingNumber {
	border-radius: 50%;
	color: white;
	background: #1d1858;
	width: 20px;
	height: 20px;
	}

	.inactive-div {
	width: 500px;
	background: gray;
	height: 10px;
	}

	.inactive-span {
	border-radius: 50%;
	color: white;
	background: gray;
	width: 20px;
	height: 20px;
	}

	.format-border {
	border-radius: 20px;
	}

</style>

@code {
	[Parameter] public Employee Employee { get; set; } = new();

	[Parameter] public bool ShowAddOrUpdateEmployee { get; set; }
	[Parameter] public EmployeeGrouping1 EmployeeGroup1 { get; set; } = new();
	[Parameter] public EmployeeGrouping2 EmployeeGroup2 { get; set; } = new();

	[Parameter] public List<Country> Countries { get; set; } = new();
	[Parameter] public List<County> Counties { get; set; } = new();
	[Parameter] public List<Town> Towns { get; set; } = new();

	[Parameter] public List<Division> Divisions { get; set; } = new();
	[Parameter] public List<Department> Departments { get; set; } = new();
	[Parameter] public List<Specialization> Specializations { get; set; } = new();

	[Parameter] public List<User> Users { get; set; } = new();

	public string Title { get; set; } = "Add";
	public string Division { get; set; } = "";
	public string Department { get; set; } = "";
	public string Specialization { get; set; } = "";
	public string Country { get; set; } = "";
	public string County { get; set; } = "";
	public string Town { get; set; } = "";
	public string User { get; set; } = "";


	string FloatingNumber1 = "floatingNumber";
	string Floatingdiv1 = "floatingDiv";
	string FloatingNumber2 = "inactive-span";
	string Floatingdiv2 = "inactive-div";

	public bool FirstLayer { get; set; } = true;
	public bool SecondLayer { get; set; } = false;


	private void ShowLayer2()
	{
		FirstLayer = false;
		SecondLayer = true;
	}

	private void PrevClicked()
	{
		FirstLayer = true;
		SecondLayer = false;
	}

	[Parameter] public EventCallback NotifyParentFormCloseClicked { get; set; }
	async Task CloseForm()
	{
		ShowAddOrUpdateEmployee = false;
		await NotifyParentFormCloseClicked.InvokeAsync();
	}

	//Validation forms

	private bool ValidateEmployeeGroup1()
	{
		if (string.IsNullOrEmpty(EmployeeGroup1.Fullname) || string.IsNullOrEmpty(EmployeeGroup1.PhoneNumber) ||
		string.IsNullOrEmpty(EmployeeGroup1.Address) || EmployeeGroup1.HireDate == DateTime.MinValue)
			return false;
		else
			return true;
	}

	private bool ValidateEmployeeGroup2()
	{
		if (EmployeeGroup2.UserID == 0 || EmployeeGroup2.TownID == 0 || EmployeeGroup2.SpecializationID == 0)
			return false;
		else
			return true;
	}

	//Form 1/ 2
	[Parameter] public EventCallback<Employee> HandleSaveEmployeeClickedEvent { get; set; }

	private void Form1()
	{
		var isValid = ValidateEmployeeGroup1();
		if (isValid)
		{
			Employee.Fullname = EmployeeGroup1.Fullname;
			Employee.PhoneNumber = EmployeeGroup1.PhoneNumber;
			Employee.Address = EmployeeGroup1.Address;
			Employee.HireDate = EmployeeGroup1.HireDate;
			ShowLayer2();
		}
	}

	private async Task Form2()
	{
		var isValid = ValidateEmployeeGroup2();
		if (isValid)
		{
			Employee.SpecializationID = EmployeeGroup2.SpecializationID;
			Employee.TownID = EmployeeGroup2.TownID;
			Employee.UserID = EmployeeGroup2.UserID;

			await HandleSaveEmployeeClickedEvent.InvokeAsync(Employee);
		}
	}

	protected void ClearContent()
	{
		EmployeeGroup1 = new();
		EmployeeGroup2 = new();
		Employee = new();
		StateHasChanged();
	}

	protected override void OnInitialized() => allState.Action += StateHasChanged;


	//Country/County/Town
	[Parameter] public EventCallback<int> HandleCountrySelectedEvent { get; set; }
	public void OnCountryValueChange(ChangeEventArgs<string, Country> args) => HandleCountrySelectedEvent.InvokeAsync(int.Parse(args.Value));

	[Parameter] public EventCallback<int> HandleCountySelectedEvent { get; set; }
	public async void OnCountyValueChange(ChangeEventArgs<string, County> args) => await HandleCountySelectedEvent.InvokeAsync(int.Parse(args.Value));
	public void OnTownValueChange(ChangeEventArgs<string, Town> args) => EmployeeGroup2.TownID = int.Parse(args.Value);

	//Division/Department/Specialization
	[Parameter] public EventCallback<int> HandleDivisionSelectedEvent { get; set; }
	public void OnDivisionValueChange(ChangeEventArgs<string, Division> args) => HandleDivisionSelectedEvent.InvokeAsync(int.Parse(args.Value));

	[Parameter] public EventCallback<int> HandleDepartmentSelectedEvent { get; set; }
	public async void OnDepartmentValueChange(ChangeEventArgs<string, Department> args) => await HandleDepartmentSelectedEvent.InvokeAsync(int.Parse(args.Value));
	public void OnSpecializationValueChange(ChangeEventArgs<string, Specialization> args) => EmployeeGroup2.SpecializationID = int.Parse(args.Value);
	public void OnUserValueChange(ChangeEventArgs<string, User> args) => EmployeeGroup2.UserID = int.Parse(args.Value);

	public void Dispose() => allState.Action -= StateHasChanged;

}