@implements IDisposable
@if (allState.ShowEmployee)
{
	if (ShowMainPage)
	{
		<div class="container-fluid mt-5">
			<div class="row">
				<div class="col-lg-12">
					<div class="card">
						<div class="card-header">
							<button class="btn btn-outline-success" @onclick="ShowAddOrUpdateEmployeeButtonClicked">
								<i class="bi bi-plus-circle-dotted"></i>Add Employee
							</button>
						</div>
						<div class="card-body">
							<SfGrid DataSource="@Employees">
								<GridColumns>

									<GridColumn Field=@nameof(Employee.Fullname) HeaderText="Name"></GridColumn>
									<GridColumn Field=@nameof(Employee.PhoneNumber) HeaderText="Phone Number"></GridColumn>
									<GridColumn Field="Specialization.Name" HeaderText="Specialization"></GridColumn>
									<GridColumn Field=@nameof(Employee.Address) HeaderText="Address"></GridColumn>
									<GridColumn Field="Town.Name" HeaderText="Town"></GridColumn>
									<GridColumn Field="Town.County.Name" HeaderText="County"></GridColumn>

									<GridColumn HeaderText="Menu" HeaderTextAlign="TextAlign.Left">
										<Template>
											@{
												var employee = (context as Employee);
												<i class="bi bi-menu-down text-primary" id="cursorStyle" @onclick="()=>ShowMenuPopUp(employee!)"></i>
											}
										</Template>
									</GridColumn>

									@*  <GridColumn Field=@nameof(Employee.User.Email) HeaderText="Email"></GridColumn> *@
								</GridColumns>
							</SfGrid>
						</div>
						<div class="card-footer" />
					</div>
				</div>
			</div>
		</div>
	}
}

<AddOrUpdateEmployeePage @ref="addOrUpdateEmployee"
Employee="Employee"
ShowAddOrUpdateEmployee="ShowAddOrUpdatePage"
NotifyParentFormCloseClicked="NotifyParentFormCloseClicked"
Counties="SelectedCounties"
Countries="DefaultCountries"
Towns="SelectedTowns"
Divisions="DefaultDivisions"
Departments="SelectedDepartments"
Specializations="SelectedSpecializations"
HandleCountrySelectedEvent="HandleCountrySelectedEvent"
HandleCountySelectedEvent="HandleCountySelectedEvent"
HandleDepartmentSelectedEvent="HandleDepartmentSelectedEvent"
HandleDivisionSelectedEvent="HandleDivisionSelectedEvent"
HandleSaveEmployeeClickedEvent="HandleSaveEmployeeClickedEvent" />

<EmployeeDetailsPage EmployeeDetails="Employee"
					 ShowDetailsPage="ShowDetailsPage" 
					 HandleDetailsPageCloseBtnClicked="HandleDetailsPageCloseBtnClicked" />


<ContextMenu @ref="contextMenu"
HandleViewClicked="ViewClicked"
HandleEditClicked="EditClicked"
HandleDeleteClicked="DeleteClicked"
HandleAddEquipmentClicked="AddEquipmentClicked"
HandleAddRequestEquipmentClicked="AddRequestEquipmentClicked" />

@code {
	public List<Employee> Employees { get; set; } = [];
	AddOrUpdateEmployeePage? addOrUpdateEmployee;
	public Employee Employee { get; set; } = new();

	public List<Country> DefaultCountries { get; set; } = [];
	public List<County> DefaultCounties { get; set; } = [];
	public List<Town> DefaultTowns { get; set; } = [];

	public List<Division> DefaultDivisions { get; set; } = [];
	public List<Department> DefaultDepartments { get; set; } = [];
	public List<Specialization> DefaultSpecializations { get; set; } = [];

	//public List<User> DefaultUsers { get; set; } = [];

	public List<Town> SelectedTowns { get; set; } = [];
	public List<County> SelectedCounties { get; set; } = [];
	public List<Department> SelectedDepartments { get; set; } = [];
	public List<Specialization> SelectedSpecializations { get; set; } = [];

	protected async override Task OnInitializedAsync()
	{
		allState.Action += StateHasChanged;
		await LoadEmployees();
		await LoadDefaults();
	}

	private async Task LoadEmployees()
	{

		Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);
	}


	private async Task LoadDefaults()
	{

		DefaultCountries = await countryService.GetAll(Constants.CountryBaseUrl);
		DefaultCounties = await cityService.GetAll(Constants.CountyBaseUrl);
		DefaultTowns = await townService.GetAll(Constants.TownBaseUrl);

		DefaultDivisions = await generalDepartmentService.GetAll(Constants.DivisionBaseUrl);
		DefaultDepartments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
		DefaultSpecializations = await specializationService.GetAll(Constants.SpecializationBaseUrl);

	}



	private void HandleCountrySelectedEvent(int item) =>
		SelectedCounties = DefaultCounties.Where(c => c.CountryID == item).ToList();

	private void HandleCountySelectedEvent(int item) =>
		SelectedTowns = DefaultTowns.Where(t => t.CountyID == item).ToList();

	private void HandleDivisionSelectedEvent(int item) =>
		SelectedDepartments = DefaultDepartments.Where(d => d.DivisionID == item).ToList();

	private void HandleDepartmentSelectedEvent(int item) =>
		SelectedSpecializations = DefaultSpecializations.Where(s => s.DepartmentID == item).ToList();

	private async Task NotifyParentFormCloseClicked()
	{
		ShowMainPage = true;
		ShowAddOrUpdatePage = false;
		await LoadEmployees();
	}

	private async Task HandleSaveEmployeeClickedEvent(Employee employee)
	{
		bool successCheck = false;
		if (employee.ID > 0)
		{
			var result = await employeeService.Update(employee, Constants.EmployeeBaseUrl);
			successCheck = await DisplayMessage(result.Flag, result.Message);
		}
		else
		{
			var response = await employeeService.Insert(employee, Constants.EmployeeBaseUrl);
			successCheck = await DisplayMessage(response.Flag, response.Message);
		}

		if (successCheck)
		{
			addOrUpdateEmployee!.ClearContent();
		}
	}

	private async Task<bool> DisplayMessage(bool flag, string message)
	{
		if (flag)
		{
			await dialogService.AlertAsync(message, "Success operation!");
			return true;
		}
		else
		{
			await dialogService.AlertAsync(message, "Alert!");
			return false;
		}
	}

	public bool ShowMainPage { get; set; } = true;
	public bool ShowAddOrUpdatePage { get; set; } = false;
	void ShowAddOrUpdateEmployeeButtonClicked()
	{
		ShowMainPage = false;
		ShowAddOrUpdatePage = true;
	}


	public Employee SelectedEmployee { get; set; } = new();
	ContextMenu? contextMenu;
	void ShowMenuPopUp(Employee employee)
	{
		SelectedEmployee = employee;
		contextMenu!.OpenContextMenu();
	}

	void EditClicked()
	{
		addOrUpdateEmployee!.Employee.ID = SelectedEmployee.ID;
		addOrUpdateEmployee!.EmployeeGroup1.Fullname = SelectedEmployee.Fullname;
		addOrUpdateEmployee!.EmployeeGroup1.PhoneNumber = SelectedEmployee.PhoneNumber;
		addOrUpdateEmployee!.EmployeeGroup1.Address = SelectedEmployee.Address;
		addOrUpdateEmployee!.EmployeeGroup1.HireDate = SelectedEmployee.HireDate;

		addOrUpdateEmployee!.Division = SelectedEmployee.Specialization!.Department!.Division!.Name;
		addOrUpdateEmployee!.Department = SelectedEmployee.Specialization!.Department!.Name;
		addOrUpdateEmployee!.Specialization = SelectedEmployee.Specialization!.Name;

		addOrUpdateEmployee!.Country = SelectedEmployee.Town!.County!.Country!.Name;
		addOrUpdateEmployee!.County = SelectedEmployee.Town!.County!.Name;
		addOrUpdateEmployee!.Town = SelectedEmployee.Town!.Name;

		addOrUpdateEmployee.Title = "Update";
		SelectedEmployee=new();
		contextMenu!.CloseContextMenu();	
		ShowAddOrUpdatePage = true;
		ShowMainPage = false;
	}

	public bool ShowDetailsPage { get; set; } = false;
	void ViewClicked()
	{

		Employee = SelectedEmployee;
		contextMenu!.CloseContextMenu();
		ShowDetailsPage = true;
		ShowMainPage = false;
		SelectedEmployee = new();
	}

	private async Task DeleteClicked()
	{
		contextMenu!.CloseContextMenu();
		bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete {SelectedEmployee.Fullname} ?", "Confirm delete");
		if (!confirm) return;

		var response = await specializationService.DeleteByID(SelectedEmployee.ID, Constants.EmployeeBaseUrl);
		var result = await DisplayMessage(response.Flag, response.Message);
		if (result)
		{
			SelectedEmployee = new();
			await LoadEmployees();
		}
	}

	private void AddEquipmentClicked()
	{
		contextMenu!.CloseContextMenu();
	}

	private void AddRequestEquipmentClicked()
	{
		contextMenu!.CloseContextMenu();
	}

	public void Dispose() => allState.Action -= StateHasChanged;
}


@* 10:12 *@