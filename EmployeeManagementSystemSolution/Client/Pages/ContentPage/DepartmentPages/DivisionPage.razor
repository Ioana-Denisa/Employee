@implements IDisposable



@if (allState.ShowDivision)
{
	<div class="container mt-5">
		<div class="row">
			<div class="col-lg-12">
				<div class="card">
					<div class="card-header">
						<h4 class="float-start">Division</h4>
						<button class="btn btn-outline-success float-end" @onclick="OpenDialog">
							<i class="bi bi-plus-circle-dotted"></i>Add Division
						</button>
					</div>
					<div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
						<div class="card-body">
							<table class="table table-striped">
								<thead>
									<tr>
										<th scope="col">#</th>
										<th scope="col">ID</th>
										<th scope="col">Name</th>
										<th scope="col">Action</th>
									</tr>
								</thead>
								<tbody>
									@if (Divisions is not null)
									{
										int count = 1;
										foreach (var item in Divisions)
										{
											<tr>
												<th scope="row">@count</th>
												<td>@item.ID</td>
												<td>@item.Name</td>
												<td>
													<i class=" bi  bi-pencil text-info" id="cursorStyle"
													@onclick="()=>EditClicked(item)" />
													<i class="bi bi-trash text-danger" id="cursorStyle"
													@onclick="()=>DeleteClicked(item)" />
												</td>
											</tr>
											count++;
										}
									}
									else
									{
										<tr>
											<td colspan="4">
												<div class="alert alert-info text-center">
													No Department added yet!
												</div>
											</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}


<DivisionDialog @ref="divisionDialog"
HandleSaveOperationEvent="HandleSaveOperatioEvent"
				Division="Division" />

<style>
	.cursorStyle{
		cursor:pointer;
	}
</style>

@code {
	DivisionDialog? divisionDialog;
	Division Division = new();
	public string Title { get; set; } = "Add";
	public List<Division> Divisions { get; set; } = new();


	protected async override Task OnInitializedAsync()
	{
		await GetGeneralDepartments();
		allState.Action += StateHasChanged;
	}
	private async Task GetGeneralDepartments()
	{
		Divisions = await generalDepartmentService.GetAll(Constants.DivisionBaseUrl);
	}

	void OpenDialog()
	{
		divisionDialog?.OpenDialog();
	}

	private async Task HandleSaveOperatioEvent(Division generalDepartment)
	{
		bool successCheck = false;
		if (generalDepartment.ID > 0)
		{
			var result = await generalDepartmentService.Update(generalDepartment, Constants.DivisionBaseUrl);
			successCheck = await DisplayMessage(result.Flag, result.Message);
		}
		else
		{
			var result = await generalDepartmentService.Insert(generalDepartment, Constants.DivisionBaseUrl);
			successCheck = await DisplayMessage(result.Flag, result.Message);
		}

		if (successCheck)
		{
			Division = new();
			await GetGeneralDepartments();
			divisionDialog?.ChangeTitle("Add");
		}
	}

	private void EditClicked(Division dep)
	{
		divisionDialog?.ChangeTitle("Update");
		Division = dep;
		OpenDialog();
	}

	private async Task DeleteClicked(Division dep)
	{
		bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {dep.Name}?", "Confirm delete!");
		if (!confirm) return;

		var response =await generalDepartmentService.DeleteByID(dep.ID,Constants.DivisionBaseUrl);
		if (await DisplayMessage(response.Flag, response.Message))
			await GetGeneralDepartments();
	}

	private async Task<bool> DisplayMessage(bool flag, string message)
	{
		if (flag)
		{
			await dialogService.AlertAsync(message, "Success!");
			return true;
		}
		else
		{
			await dialogService.AlertAsync(message, "Alert!");
			return false;
		}
	}

	public void Dispose()
	{
		allState.Action -= StateHasChanged;
	}
}
