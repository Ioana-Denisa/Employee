@implements IDisposable

@if (allState.ShowCounty)
{
	<div class="container mt-5">
		<div class="row">
			<div class="col-lg-12">
				<div class="card">
					<div class="card-header">
						<h4 class="float-start">County</h4>
						<button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
							<i class="bi bi-plus-circle-dotted"></i>Add City
						</button>
					</div>
					<div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
						<div class="card-body">
							<table class="table table-striped">
								<thead>
									<tr>
										<th scope="col">#</th>
										<th scope="col">ID</th>
										<th scope="col">Country</th>
										<th scope="col">Name</th>
										<th scope="col">Action</th>
									</tr>
								</thead>
								<tbody>
									@if (Counties is not null)
									{
										int count = 1;
										foreach (var item in Counties)
										{
											<tr>
												<th scope="row">@count</th>
												<td>@item.ID</td>
												<td>@item.Country!.Name</td>
												<td>@item.Name</td>
												<td>
													<i class=" bi  bi-pencil text-info" id="cursorStyle"
													   @onclick="()=>EditClicked(item)" />
													<i class="bi bi-trash text-danger" id="cursorStyle"
													   @onclick="()=>DeleteClicked(item)" />
												</td>
											</tr>
											count++;
										}
									}
									else
									{
										<tr>
											<td colspan="4">
												<div class="alert alert-info text-center">
													No County added yet!
												</div>
											</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}


<style>
	.cursorStyle {
		cursor: pointer;
	}
</style>

<CountyDialog @ref="countyDialog"
			  HandleSaveOperationEvent="HandleSaveOperationEvent"
			  County="County"
			  Countries="Countries" />

@code {
	CountyDialog? countyDialog;
	County County = new();
	public string Title { get; set; } = "Add";
	public List<Country> Countries { get; set; } = new();
	public List<County> Counties { get; set; } = new();

	protected async override Task OnInitializedAsync()
	{
		await GetCountries();
		await GetCities();
		allState.Action += StateHasChanged;
	}

	private async Task GetCountries()
	{
		Countries = await countryService.GetAll(Constants.CountryBaseUrl);
	}

	private async Task GetCities()
	{
		Counties = await cityService.GetAll(Constants.CountyBaseUrl);
	}

	private async Task AddButtonClicked()
	{
		countyDialog?.ChangeTitle("Add");
		County = new();
		OpenDialog();
	}

	void OpenDialog()
	{
		countyDialog?.OpenDialog();
	}

	private async Task HandleSaveOperationEvent(County city)
	{
		bool successCheck = false;
		if (city.ID > 0)
		{
			var result = await cityService.Update(city, Constants.CountyBaseUrl);
			successCheck = await DisplayMessage(result.Flag, result.Message);
		}
		else
		{
			var result = await cityService.Insert(city, Constants.CountyBaseUrl);
			successCheck = await DisplayMessage(result.Flag, result.Message);
		}

		if (successCheck)
		{
			County = new();
			await GetCities();
			countyDialog?.ChangeTitle("Add");
		}
	}

	private void EditClicked(County city)
	{
		countyDialog?.ChangeTitle("Update");
		County = city;
		OpenDialog();
	}

	private async Task DeleteClicked(County city)
	{
		bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {city.Name}?", "Confirm delete!");
		if (!confirm) return;

		var response = await cityService.DeleteByID(city.ID, Constants.CountyBaseUrl);
		var result = await DisplayMessage(response.Flag, response.Message);
		if (result)
			await GetCities();
	}

	private async Task<bool> DisplayMessage(bool flag, string message)
	{
		if (flag)
		{
			await dialogService.AlertAsync(message, "Success!");
			return true;
		}
		else
		{
			await dialogService.AlertAsync(message, "Alert!");
			return false;
		}
	}

	public void Dispose()
	{
		allState.Action -= StateHasChanged;
	}
}
