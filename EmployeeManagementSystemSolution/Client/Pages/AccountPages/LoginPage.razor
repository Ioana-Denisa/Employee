@page "/identity/account/login"
@layout AuthenticationLayout

<div class="container">
	<div class="row justify-content-center">
		<div class="col-lg-4 col-md-6 col-sm-8">
			<EditForm Enhance Model="User" OnValidSubmit="HandleLogin">
				<DataAnnotationsValidator />
				<div class="card bg-dark text-white"
					 style="opacity:0.8; margin-top:10%; border-radius:15px; font-weight:bold">
					<!-- Card Header -->
					<div class="card-header text-center fs-3 mb-3">
						Login
					</div>
					<!-- Logo -->
					<div class="text-center mb-3">
						<img src="../images/logo.png" alt="Logo" class="rounded-circle" height="70" width="70" />
					</div>
					<!-- Card Body -->
					<div class="card-body px-4">
						<div class="form-group mb-4">
							<label class="form-label fs-5">Email</label>
							<InputText @bind-Value="User.Email"
									   class="form-control form-control-lg"
									   placeholder="Enter your email" />
						</div>
						<div class="form-group mb-4">
							<label class="form-label fs-5">Password</label>
							<input type="password"
								   @bind="User.Password"
								   class="form-control form-control-lg"
								   placeholder="Enter your password" />
						</div>
						<div class="form-group text-end">
							@if (ShowLoadingButton)
							{
								<button class="btn btn-primary btn-lg px-5" type="button" disabled>
									<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
									Processing...
								</button>
							}
							else
							{
								<button class="btn btn-primary btn-lg px-5" type="submit">Login</button>
							}
						</div>
					</div>
					<!-- Card Footer -->
					<div class="card-footer text-center">
						<span>Don’t have an account? |</span>
						<a class="btn-link text-decoration-none" href="identity/account/register">Sign Up</a>
						<ValidationSummary />
					</div>
				</div>
			</EditForm>
		</div>
	</div>
</div>


@code {
	public bool ShowLoadingButton { get; set; } = false;
	Login User = new();

	[CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }
	protected async override Task OnInitializedAsync()
	{
		await CheckUserAuthentication();
	}

	async Task HandleLogin()
	{
		ShowLoadingButton = true;
		StateHasChanged();

		var result = await accountService.SigninAsync(User);
		if (result.Flag)
		{
			await DisplayDialog(result.Message, "Login Success");
			var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
			await customAuthStateProvider.UpdateAuthenticationState(new UserSession()
				{
					Token = result.Token,
					RefreshToken = result.RefreshToken
				});
			NavManager.NavigateTo("/", forceLoad: true);
		}
		else
		{
			await DisplayDialog(result.Message, "Alert");
		}
		ShowLoadingButton = false;
		StateHasChanged();
	}

	private async Task DisplayDialog(string content, string title)
	{
		await dialogService.AlertAsync(content, title);
	}

	private async Task CheckUserAuthentication()
	{
		var user = (await AuthenticationState).User;
		bool isUserAuthentication = user.Identity!.IsAuthenticated;
		if (isUserAuthentication)
		{
			NavManager.NavigateTo("/home/dashboard");
		}
	}
}