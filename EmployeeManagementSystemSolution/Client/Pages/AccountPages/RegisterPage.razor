@page "/identity/account/register"
@layout AuthenticationLayout
@using Syncfusion.Blazor.Popups
@inject SfDialogService DialogService

<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-4 col-md-6 col-sm-8">
            <EditForm Enhance Model="User" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />
                <div class="card bg-dark text-white"
                style="opacity:0.8; margin-top:10%; border-radius:15px; font-weight:bold">
                    <!-- Card Header -->
                    <div class="card-header text-center fs-3 mb-3">
                        Register an Account
                    </div>
                    <!-- Profile Image -->
                    <div class="text-center mb-3">
                        <img src="../images/profile.jpg" alt="Profile"
                        class="rounded-circle" height="70" width="70" />
                    </div>
                    <!-- Card Body -->
                    <div class="card-body px-4">
                        <div class="form-group mb-4">
                            <label class="form-label fs-5">Fullname</label>
                            <InputText @bind-Value="User.Username"
                            class="form-control form-control-lg"
                            placeholder="Enter your fullname" />
                        </div>
                        <div class="form-group mb-4">
                            <label class="form-label fs-5">Email</label>
                            <InputText @bind-Value="User.Email"
                            class="form-control form-control-lg"
                            placeholder="Enter your email" />
                        </div>
                        <div class="form-group mb-4">
                            <label class="form-label fs-5">Password</label>
                            <input type="password"
                            @bind="User.Password"
                            class="form-control form-control-lg"
                            placeholder="Enter your password" />
                        </div>
                        <div class="form-group mb-4">
                            <label class="form-label fs-5">Confirm Password</label>
                            <input type="password"
                            @bind="User.ConfirmPassword"
                            class="form-control form-control-lg"
                            placeholder="Confirm your password" />
                        </div>
                        <div class="form-group text-end">
                            @if(ShowLoadingButton)
                            {
                                <ButtonLoadingSpinner></ButtonLoadingSpinner>
                            }else
                            {
                                <button class="btn btn-primary btn-lg px-5" type="submit">Register</button>
                            }
                        </div>
                    </div>
                    <!-- Card Footer -->
                    <div class="card-footer text-center">
                        <span>Have an account already? |</span>
                        <a class="btn-link text-decoration-none" href="identity/account/login"> Sign In</a>
                        <ValidationSummary />
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>



@code {
    public bool ShowLoadingButton { get; set; } = false;
    Register User = new();

    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }


    async Task HandleRegistration()
    {
        ShowLoadingButton = true;
        var result = await accountService.CreateAsync(User);
		if (result.Flag)
		{
            await DisplayDialog(result.Message, "Success");
			User = new();
		}
		else
		{
            await DisplayDialog(result.Message, "Alert");
		}
        ShowLoadingButton = false;
	}

    private async Task DisplayDialog(string content, string title)
    {
        await DialogService.AlertAsync(content, title);
    }

    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState).User;
        bool isUserAuthentication = user.Identity!.IsAuthenticated;
        if (isUserAuthentication)
        {
            NavManager.NavigateTo("/home/dashboard");
        }
    }
}